"use client"

import { useContext, useEffect, useMemo, useState } from "react"
import Sidebar from "@/sidebar/sidebar"
import { toURL } from "$/func/func"
import { Controller } from "$/provider/provider"

interface Symbol {
  name?: string
  symbol?: string
}

interface Category {
  slug: string
  symbols: Symbol[]
}

interface ControllerInt {
  data: {
    categories: {
      category: Category[]
    }
  }
}

interface SymbolState {
  name?: string
  symbol?: string
}

export default function Slug({ params }: { params: { slug: string } }) {
  const { slug } = params

  const controller = useContext<ControllerInt | undefined>(
    Controller as unknown as React.Context<ControllerInt | undefined>
  )

  const [symbolState, setSymbolState] = useState<SymbolState | null>(null)

  const flattenedSymbols = useMemo(() => {
    return (
      controller?.data?.categories?.category.flatMap(
        (category) => category.symbols
      ) || []
    )
  }, [controller?.data?.categories?.category])

  useEffect(() => {
    const matchingSymbol = flattenedSymbols.find(
      (s) => toURL(s.name) === slug.toLowerCase()
    )
    if (
      matchingSymbol &&
      (matchingSymbol.symbol !== symbolState?.symbol ||
        matchingSymbol.name !== symbolState?.name)
    ) {
      setSymbolState({
        symbol: matchingSymbol.symbol,
        name: matchingSymbol.name,
      })
    }
  }, [slug, flattenedSymbols, symbolState])

  return (
    <Sidebar
      symbol={symbolState?.symbol ?? null}
      name={symbolState?.name ?? ""}
    />
  )
}
