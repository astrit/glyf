"use client"

import React, { useContext, useEffect, useMemo, useState } from "react"
import Link from "@/link/link"
import { toURL } from "$/func/func"
import { Controller } from "$/provider/provider"

import "./grid.css"

interface Symbol {
  name: string
  symbol: string
  unicode?: string
  html_entity?: string
}

interface Category {
  slug: string
  title: string
  description: string
  symbols: Symbol[]
}

interface Data {
  categories: {
    category: Category[]
  }
}

export default function Grid() {
  const { loading, data } = useContext(Controller)
  const [displayCount, setDisplayCount] = useState(100)

  const memoizedCategories = useMemo(() => {
    if (!data) {
      return []
    }

    const allSymbols = data.categories.category.flatMap(
      (category: { symbols: any }) => category.symbols
    )
    return allSymbols.slice(0, displayCount)
  }, [data, displayCount])

  // Effect to handle infinite scrolling
  useEffect(() => {
    const handleScroll = () => {
      if (
        window.innerHeight + document.documentElement.scrollTop >=
        document.documentElement.offsetHeight
      ) {
        setDisplayCount((prevCount) => prevCount + 100)
      }
    }

    window.addEventListener("scroll", handleScroll)

    return () => window.removeEventListener("scroll", handleScroll)
  }, [])

  return (
    <div className="grid">
      {memoizedCategories.map((symbol: Symbol, index: number) => (
        <Link
          href={`/${toURL(symbol.name)}`}
          key={index + symbol.symbol}
          className="symbol"
          data-symbol={symbol.symbol}
        />
      ))}
    </div>
  )
}
